#!/bin/bash
# pyspark-jupyter-cdh daemon
# chkconfig: 345 20 80
# description: pyspark-jupyter-cdh daemon
# processname: pyspark-jupyter-cdh
# location: /etc/init.d
# author: m1no5
# version 1.1

# These are the variables to change
export DAEMON_USER=hdfs
export DAEMON_NAME=pyspark-jupyter-cdh
export DAEMON_PATH=/var/jupyter
export DAEMON_PORT=8880
# End of variables to change

export PIDFILE=/var/run/$DAEMON_NAME.pid
export SCRIPTNAME=/etc/init.d/$DAEMON_NAME

#Source Function Library
. /etc/rc.d/init.d/functions

setupenv() {
    # Setup the Log

    export JUPYTER_LOG=/var/log/pyspark-jupyter-cdh/pyspark-jupyter-cdh.log
    if [[ ! -d /var/log/pyspark-jupyter-cdh ]]; then
        mkdir -p /var/log/pyspark-jupyter-cdh
        chown -R $DAEMON_USER:$DAEMON_USER /var/log/pyspark-jupyter-cdh
        touch $JUPYTER_LOG
        chown $DAEMON_USER:$DAEMON_USER $JUPYTER_LOG
    fi

    # Test for a valid user
    USER_ENTRY=$(getent passwd $DAEMON_USER)
    if [[ -z  $DAEMON_USER ]]; then
        echo "Daemon user $DAEMON_NAME does not exist" >> $JUPYTER_LOG
        exit 1
    fi

    # Set and create the working path
    if [[ ! -d $DAEMON_PATH ]]; then
        mkdir -p $DAEMON_PATH >> $JUPYTER_LOG 2>&1
        chown -R $DAEMON_USER:$DAEMON_USER $DAEMON_PATH >> $JUPYTER_LOG 2>&1
    fi
    
    # Permit the port through IPTables
    iptables -C INPUT -p tcp --dport $DAEMON_PORT --jump ACCEPT  >> $JUPYTER_LOG 2>&1
    service iptables save > /dev/null >> $JUPYTER_LOG 2>&1
}

case "$1" in
start)
        printf "%-50s" "Starting $DAEMON_NAME..."
        setupenv
        cd $DAEMON_PATH
        su -l $DAEMON_USER -c "/usr/local/sbin/pyspark-jupyter-cdh.sh $DAEMON_PORT >> $JUPYTER_LOG 2>&1" &
        PID=$!
        if [ -z $PID ]; then
            printf "%s\n" "Fail"
        else
            echo $PID > $PIDFILE
            printf "%s\n" "Ok"
        fi
;;
status)
        printf "%-50s" "Checking $DAEMON_NAME..."
        if [ -f $PIDFILE ]; then
            PID=`cat $PIDFILE`
            if [ -z "`ps axf | grep ${PID} | grep -v grep`" ]; then
                printf "%s\n" "Process dead but pidfile exists"
            else
                echo "Running"
            fi
        else
            printf "%s\n" "Service not running"
        fi
;;
stop)
        printf "%-50s" "Stopping $DAEMON_NAME"
        if [ -f $PIDFILE ]; then
            PID=`cat $PIDFILE`
            if [[ ! -z $PID ]]; then 
                kill -9 `pstree -p $PID | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr "\n" " "`  > /dev/null 2>&1
            else
                printf "%s\n" "pidfile was empty"
            fi
            printf "%s\n" "Ok"
            rm -f $PIDFILE
        else
            printf "%s\n" "Service is already stopped. Pidfile not found"
        fi
;;

restart)
  	$0 stop
  	$0 start
;;

*)
        echo "Usage: $0 {status|start|stop|restart}"
        exit 1
esac
